<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

    <modelVersion>4.0.0</modelVersion>
    <packaging>bundle</packaging>
    <groupId>org.swinchester</groupId>
    <artifactId>jms-bridge</artifactId>
    <version>1.0-SNAPSHOT</version>

    <name>camel-xa-tx-example-jms-bridge</name>
    <description>Camel route using ActiveMQ in Karaf container</description>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <version.maven-bundle-plugin>2.3.7</version.maven-bundle-plugin>

        <!-- the version of the BOM, defining all the dependency versions -->
        <fuse.version>6.2.1.redhat-084</fuse.version>
        <fabric8.version>2.2.0.redhat-079</fabric8.version>
        <docker.maven.plugin.version>0.13.6</docker.maven.plugin.version>
        <karaf.plugin.version>4.0.2.redhat-621079</karaf.plugin.version>

        <docker.from>jboss-fuse-6/fis-karaf-openshift:1.0</docker.from>
        <fabric8.dockerUser>fabric8/</fabric8.dockerUser>
        <docker.image>${fabric8.dockerUser}${project.artifactId}:${project.version}</docker.image>
        <docker.assemblyDescriptor>${basedir}/src/main/fabric8/assembly.xml</docker.assemblyDescriptor>

        <fabric8.env.KARAF_ENV_CONFIG_FILE_NAME></fabric8.env.KARAF_ENV_CONFIG_FILE_NAME>
        <fabric8.env.KARAF_ENV_APP_SIMULATE_PROCESSING_ERROR>true</fabric8.env.KARAF_ENV_APP_SIMULATE_PROCESSING_ERROR>
        <fabric8.env.KARAF_ENV_APP_ERROR_AFTER_MSGS>5</fabric8.env.KARAF_ENV_APP_ERROR_AFTER_MSGS>
        <fabric8.env.KARAF_ENV_APP_AMQ_SOURCE_BROKER_URL>
            failover:(tcp://broker-amq-tcp.source:61616)?jms.prefetchPolicy.all=1
        </fabric8.env.KARAF_ENV_APP_AMQ_SOURCE_BROKER_URL>
        <fabric8.env.KARAF_ENV_APP_AMQ_TARGET_BROKER_URL>failover:(tcp://broker-amq-tcp.target:61616)
        </fabric8.env.KARAF_ENV_APP_AMQ_TARGET_BROKER_URL>
        <fabric8.env.KARAF_ENV_APP_AMQ_USERNAME>admin</fabric8.env.KARAF_ENV_APP_AMQ_USERNAME>
        <fabric8.env.KARAF_ENV_APP_AMQ_PASSWORD>admin</fabric8.env.KARAF_ENV_APP_AMQ_PASSWORD>
    </properties>

    <dependencyManagement>
        <dependencies>
            <!-- fabric8 bom must be before fabric8 bom -->
            <dependency>
                <groupId>io.fabric8</groupId>
                <artifactId>fabric8-project-bom-with-platform-deps</artifactId>
                <version>${fabric8.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <groupId>org.jboss.fuse.bom</groupId>
                <artifactId>jboss-fuse-parent</artifactId>
                <version>${fuse.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <dependencies>
        <!--
          For this example, we will be using the OSGi Blueprint XML syntax for Apache Camel.
        -->
        <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-core</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.activemq</groupId>
            <artifactId>activemq-camel</artifactId>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-log4j12</artifactId>
        </dependency>

        <!-- Karaf microcontainer dependencies -->
        <dependency>
            <!-- scope is compile so all features (there is only one) are installed into startup.properties,
            and the feature repo itself is not added in etc/org.apache.karaf.features.cfg file -->
            <groupId>org.jboss.fuse</groupId>
            <artifactId>fuse-karaf-framework</artifactId>
            <version>${fuse.version}</version>
            <type>kar</type>
            <!-- no need to download kar dependencies -->
            <exclusions>
                <exclusion>
                    <groupId>*</groupId>
                    <artifactId>*</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
    </dependencies>

    <build>
        <finalName>${project.artifactId}</finalName>
        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <filtering>true</filtering>
            </resource>
            <!--<resource>-->
            <!--<directory>src/main/fabric8</directory>-->
            <!--<includes>-->
            <!--<include>*.cfg</include>-->
            <!--</includes>-->
            <!--<targetPath>target/assembly/etc-->
            <!--</targetPath>-->
            <!--</resource>-->
        </resources>
        <plugins>
            <!-- Compiler plugin enforces Java 1.7 compatibility and activates annotation processors -->
            <plugin>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.3</version>
                <configuration>
                    <source>1.7</source>
                    <target>1.7</target>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.felix</groupId>
                <artifactId>maven-bundle-plugin</artifactId>
                <version>${version.maven-bundle-plugin}</version>
                <extensions>true</extensions>
                <configuration>
                    <instructions>
                        <Bundle-Blueprint>
                            OSGI-INF/blueprint/blueprint.xml
                        </Bundle-Blueprint>
                        <Import-Service>
                            org.apache.geronimo.transaction.manager.RecoverableTransactionManager;multiple:=false,
                            org.springframework.transaction.PlatformTransactionManager;multiple:=false
                        </Import-Service>
                        <Require-Capability>
                            osgi.ee;filter:=(&amp;(osgi.ee=JavaSE)(version=1.6))
                        </Require-Capability>
                        <Import-Package>org.apache.activemq,
                            org.apache.activemq.camel.component,
                            org.apache.activemq.pool,
                            org.apache.camel,
                            org.apache.camel.component.jms,
                            org.apache.camel.spring.spi,
                            org.apache.geronimo.transaction.manager,
                            org.osgi.service.blueprint,
                            org.slf4j,
                            org.springframework.transaction</Import-Package>
                        <Export-Package>org.swinchester</Export-Package>
                        <Private-Package>org.apache.camel.demo</Private-Package>
                    </instructions>
                </configuration>
            </plugin>
            <plugin>
                <artifactId>maven-resources-plugin</artifactId>
                <version>2.7</version>
                <executions>
                    <execution>
                        <id>filter-extra-resources</id>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <phase>process-resources</phase>
                        <configuration>
                            <outputDirectory>${project.build.directory}/fabric8</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>src/main/fabric8</directory>
                                    <filtering>true</filtering>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <!-- plugin goals have to be executed in order -->
            <!-- 1. install the bundle -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-install-plugin</artifactId>
                <version>2.5.2</version>
                <executions>
                    <execution>
                        <id>install-bundle</id>
                        <goals>
                            <goal>install</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <!-- 2. create karaf assembly -->
            <!-- karaf-maven-plugin creates custom microservice distribution -->
            <plugin>
                <groupId>org.apache.karaf.tooling</groupId>
                <artifactId>karaf-maven-plugin</artifactId>
                <version>${karaf.plugin.version}</version>
                <extensions>true</extensions>
                <executions>
                    <execution>
                        <id>karaf-assembly</id>
                        <goals>
                            <goal>assembly</goal>
                        </goals>
                        <phase>install</phase>
                    </execution>
                    <execution>
                        <id>karaf-archive</id>
                        <goals>
                            <goal>archive</goal>
                        </goals>
                        <phase>install</phase>
                    </execution>
                </executions>
                <configuration>
                    <!-- we are using karaf 2.4.x -->
                    <karafVersion>v24</karafVersion>
                    <useReferenceUrls>true</useReferenceUrls>
                    <!-- do not include build output directory -->
                    <includeBuildOutputDirectory>false</includeBuildOutputDirectory>
                    <!-- no startupFeatures -->
                    <startupFeatures>
                        <feature>karaf-framework</feature>
                        <feature>shell</feature>
                        <feature>scr</feature>
                        <feature>jaas</feature>
                        <feature>aries-blueprint</feature>
                        <feature>camel-blueprint</feature>
                        <feature>transaction</feature>
                        <feature>camel-jms</feature>
                        <feature>activemq-camel</feature>
                    </startupFeatures>
                    <startupBundles>
                        <!--<bundle>mvn:io.fabric8.mq/camel-amq/${fabric8.version}</bundle>-->
                        <!--<bundle>mvn:io.fabric8.mq/mq-client/${fabric8.version}</bundle>-->
                        <!--<bundle>mvn:io.fabric8/fabric8-utils/${fabric8.version}</bundle>-->
                        <bundle>mvn:${project.groupId}/${project.artifactId}/${project.version}</bundle>
                    </startupBundles>
                </configuration>
            </plugin>

            <!-- 3. create docker image -->
            <plugin>
                <groupId>org.jolokia</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <version>${docker.maven.plugin.version}</version>
                <configuration>
                    <images>
                        <image>
                            <name>${docker.image}</name>
                            <build>
                                <from>${docker.from}</from>
                                <assembly>
                                    <basedir>/deployments</basedir>
                                    <user>jboss:jboss:jboss</user>
                                    <inline xmlns="http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.2"
                                            xsi:schemaLocation="http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.2 http://maven.apache.org/xsd/assembly-1.1.2.xsd">
                                        <id>${project.artifactId}</id>
                                        <files>
                                            <!-- copy karaf archive -->
                                            <file>
                                                <source>
                                                    ${project.build.directory}/${project.artifactId}-${project.version}.tar.gz
                                                </source>
                                                <outputDirectory>/</outputDirectory>
                                            </file>
                                        </files>
                                    </inline>
                                </assembly>
                                <cmd>
                                    <shell>/deployments/deploy-and-run.sh</shell>
                                </cmd>
                            </build>
                        </image>
                    </images>
                </configuration>
            </plugin>
        </plugins>
    </build>

    <!--
  Default sample commands:

  mvn -Pf8-build         ... build Docker images and create OpenShift deployment configs
  mvn -Pf8-deploy        ... f8-build + push to Docker registry + applying deployment config to OpenShift
  mvn -Pf8-local-deploy ... deployment for a single node setup without pushing to a registry

  For individual goal usage please consult the fabric8 documentation
  -->
    <profiles>
        <profile>
            <id>f8-build</id>
            <build>
                <defaultGoal>clean install docker:build fabric8:json</defaultGoal>
            </build>
        </profile>
        <profile>
            <id>f8-deploy</id>
            <properties>
                <fabric8.imagePullPolicySnapshot>Always</fabric8.imagePullPolicySnapshot>
                <fabric8.recreate>true</fabric8.recreate>
            </properties>
            <build>
                <defaultGoal>clean install docker:build docker:push fabric8:json fabric8:apply</defaultGoal>
            </build>
        </profile>
        <profile>
            <id>f8-local-deploy</id>
            <properties>
                <fabric8.recreate>true</fabric8.recreate>
            </properties>
            <build>
                <defaultGoal>clean install docker:build fabric8:json fabric8:apply</defaultGoal>
            </build>
        </profile>
    </profiles>
</project>